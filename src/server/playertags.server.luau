-- Servidor para sincronizar grupos com o cliente
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Importar o mÃ³dulo de player
local PLAYER_DEFINITION = require(game.ReplicatedStorage.Shared.types["player.types"])
local cache = {
    player = {}
}
local PlayerModule = require(game.ServerScriptService.Server.framework.modules.player)(cache.player)

-- Criar RemoteEvent para sincronizar grupos
local groupSyncEvent = Instance.new("RemoteEvent")
groupSyncEvent.Name = "GroupSyncEvent"
groupSyncEvent.Parent = ReplicatedStorage

-- FunÃ§Ã£o para obter o grupo mais alto de um jogador
local function getHighestGroup(playerGroups)
    local highestGroup = nil
    local highestPriority = 0
    
    -- Prioridades dos grupos (maior nÃºmero = maior prioridade)
    local priorities = {
        owner = 4,
        admin = 3,
        moderator = 2,
        ["vip-gold"] = 1
    }
    
    for groupName, hasGroup in pairs(playerGroups) do
        if hasGroup and priorities[groupName] and priorities[groupName] > highestPriority then
            highestPriority = priorities[groupName]
            highestGroup = groupName
        end
    end
    
    return highestGroup
end

-- FunÃ§Ã£o para sincronizar grupos de todos os jogadores
local function syncAllPlayerGroups()
    print("ğŸ”„ Sincronizando grupos de todos os jogadores...")
    for _, targetPlayer in pairs(Players:GetPlayers()) do
        local playerData, playerClass = PlayerModule.get(targetPlayer, true)
        local highestGroup = getHighestGroup(playerData.groups)
        
        print("ğŸ“¤ Enviando para todos os clientes:", targetPlayer.Name, "->", highestGroup or "nil")
        
        -- Enviar para todos os clientes (incluindo o prÃ³prio jogador)
        groupSyncEvent:FireAllClients(targetPlayer, highestGroup)
    end
    print("âœ… SincronizaÃ§Ã£o concluÃ­da!")
end

-- FunÃ§Ã£o para sincronizar grupos de um jogador especÃ­fico
local function syncPlayerGroups(targetPlayer)
    local playerData, playerClass = PlayerModule.get(targetPlayer, true)
    local highestGroup = getHighestGroup(playerData.groups)
    
    print("ï¿½ï¿½ Sincronizando", targetPlayer.Name, "->", highestGroup or "nil")
    
    -- Enviar para todos os clientes
    groupSyncEvent:FireAllClients(targetPlayer, highestGroup)
end

-- Quando um jogador entra
Players.PlayerAdded:Connect(function(player)
    print("ğŸ‘¤ Jogador entrou:", player.Name)
    
    -- Aguardar um pouco para garantir que o cliente esteja pronto
    wait(3)
    
    -- Sincronizar grupos de todos os jogadores para o novo jogador
    print("ğŸ”„ Sincronizando grupos para o novo jogador...")
    for _, targetPlayer in pairs(Players:GetPlayers()) do
        local playerData, playerClass = PlayerModule.get(targetPlayer, true)
        local highestGroup = getHighestGroup(playerData.groups)
        
        print("ğŸ“¤ Enviando para", player.Name, ":", targetPlayer.Name, "->", highestGroup or "nil")
        groupSyncEvent:FireClient(player, targetPlayer, highestGroup)
    end
    print("âœ… SincronizaÃ§Ã£o para novo jogador concluÃ­da!")
end)

-- Quando um jogador sai
Players.PlayerRemoving:Connect(function(player)
    print("ğŸ‘‹ Jogador saindo:", player.Name)
    -- Notificar todos os clientes que o jogador saiu
    groupSyncEvent:FireAllClients(player, nil)
end)

-- Sincronizar grupos iniciais apÃ³s um delay
wait(2)
print("ğŸš€ Iniciando sincronizaÃ§Ã£o inicial...")
syncAllPlayerGroups()

-- Sincronizar novamente apÃ³s 5 segundos para garantir
wait(5)
print("ğŸ”„ SincronizaÃ§Ã£o de seguranÃ§a...")
syncAllPlayerGroups()
