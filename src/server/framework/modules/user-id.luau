local STORAGE_DEFINITIONS = require(game.ReplicatedStorage.Shared.storage)
local DataStoreService = game:GetService("DataStoreService")

local userIdDataStore = DataStoreService:GetDataStore(STORAGE_DEFINITIONS.userId)
local counterDataStore = DataStoreService:GetDataStore(STORAGE_DEFINITIONS.userIdCounter)

local COUNTER_KEY = "nextUserId"

-- Cache simples para IDs em uso
local usedIdsCache = {}
local cacheInitialized = false

local UserIdModule = {}

--- Obt√©m o nome de usu√°rio usando a API REST do Roblox
function UserIdModule.getUsername(robloxUserId: number): string?
    if not robloxUserId or robloxUserId <= 0 then
        return nil
    end
    
    -- Tentativa 1: API REST do Roblox
    local httpSuccess, httpResult = pcall(function()
        local HttpService = game:GetService("HttpService")
        local url = "https://users.roblox.com/v1/users/" .. robloxUserId
        local response = HttpService:GetAsync(url)
        local data = HttpService:JSONDecode(response)
        return data.name
    end)
    
    if httpSuccess and httpResult and httpResult ~= "" then
        return httpResult
    end
    
    -- Tentativa 2: API interna como fallback
    local apiSuccess, apiResult = pcall(function()
        return game:GetService("Players"):GetNameFromUserIdAsync(robloxUserId)
    end)
    
    if apiSuccess and apiResult and apiResult ~= "" then
        return apiResult
    end
    
    return nil
end

--- Inicializa o cache usando o contador como base
local function initializeUsedIdsCache()
    if cacheInitialized then
        return
    end
    
    print("üîÑ Inicializando cache de User IDs...")
    
    -- Obter o contador atual para saber quais IDs j√° foram usados
    local currentCounter = UserIdModule.getCurrentCounter() or 0
    print("üìä Contador atual:", currentCounter, "- IDs 1 a", currentCounter, "est√£o em uso")
    
    cacheInitialized = true
    print("‚úÖ Cache inicializado baseado no contador")
end

--- Obt√©m o pr√≥ximo ID dispon√≠vel e incrementa o contador de forma at√¥mica
local function getNextUserId()
    local success, nextId = pcall(function()
        return counterDataStore:UpdateAsync(COUNTER_KEY, function(currentValue)
            -- Se n√£o existe contador, come√ßar do ID 1
            local current = currentValue or 0
            return current + 1
        end)
    end)
    
    if not success or not nextId then
        warn("‚ùå Erro ao obter/atualizar contador de User ID")
        return nil
    end
    
    return nextId
end

--- Obt√©m ou cria um User ID para um jogador
function UserIdModule.getOrCreateUserId(player: Player): number?
    -- Inicializar cache se necess√°rio
    initializeUsedIdsCache()
    
    -- Validar se o player √© v√°lido
    if not player or not player.UserId then
        warn("‚ùå Player inv√°lido fornecido para getOrCreateUserId")
        return nil
    end
    
    local robloxUserId = player.UserId
    
    -- Primeiro, verificar se o jogador j√° tem um ID
    local success, existingId = pcall(function()
        return userIdDataStore:GetAsync(tostring(robloxUserId))
    end)
    
    if success and existingId and type(existingId) == "number" and existingId > 0 then
        -- Jogador j√° tem um ID v√°lido, retornar o existente
        return existingId
    end
    
    -- Jogador n√£o tem ID ou ID √© inv√°lido, criar um novo
    local newId = getNextUserId()
    if not newId then
        warn("‚ùå Falha ao gerar novo User ID para jogador:", player.Name)
        return nil
    end
    
    -- Salvar o novo ID no DataStore
    local saveSuccess = pcall(function()
        userIdDataStore:SetAsync(tostring(robloxUserId), newId)
    end)
    
    if not saveSuccess then
        warn("‚ùå Erro ao salvar User ID para jogador:", player.Name)
        return nil
    end
    
    -- Atualizar cache
    usedIdsCache[newId] = true
    
    print("‚úÖ Novo User ID criado para", player.Name, "- ID:", newId)
    return newId
end

--- Obt√©m o User ID de um jogador (sem criar um novo)
function UserIdModule.getUserId(player: Player): number?
    if not player or not player.UserId then
        warn("‚ùå Player inv√°lido fornecido para getUserId")
        return nil
    end
    
    local robloxUserId = player.UserId
    
    local success, userId = pcall(function()
        return userIdDataStore:GetAsync(tostring(robloxUserId))
    end)
    
    if success and userId and type(userId) == "number" and userId > 0 then
        return userId
    end
    
    return nil
end

--- Obt√©m o User ID por Roblox User ID (para jogadores offline)
function UserIdModule.getUserIdByRobloxId(robloxUserId: number): number?
    if not robloxUserId or type(robloxUserId) ~= "number" or robloxUserId <= 0 then
        warn("‚ùå Roblox User ID inv√°lido fornecido:", robloxUserId)
        return nil
    end
    
    local success, userId = pcall(function()
        return userIdDataStore:GetAsync(tostring(robloxUserId))
    end)
    
    if success and userId and type(userId) == "number" and userId > 0 then
        return userId
    end
    
    return nil
end

--- Obt√©m o contador atual (para debugging/admin)
function UserIdModule.getCurrentCounter(): number?
    local success, counter = pcall(function()
        return counterDataStore:GetAsync(COUNTER_KEY)
    end)
    
    if success then
        return counter or 0
    end
    
    return nil
end

--- Fun√ß√£o de diagn√≥stico para verificar a integridade do sistema
function UserIdModule.runDiagnostics(): {success: boolean, message: string, details: {[string]: any}?}
    local details = {}
    
    -- Testar acesso ao contador
    local counterSuccess, counter = pcall(function()
        return counterDataStore:GetAsync(COUNTER_KEY)
    end)
    
    details.counterAccess = counterSuccess
    details.currentCounter = counter or 0
    
    -- Testar acesso ao DataStore de User IDs
    local userIdStoreSuccess = pcall(function()
        userIdDataStore:GetAsync("test")
    end)
    
    details.userIdStoreAccess = userIdStoreSuccess
    
    -- Verificar se o sistema est√° funcional
    local isHealthy = counterSuccess and userIdStoreSuccess
    
    local message = "üîß Diagn√≥stico do Sistema de User ID:\n"
    message = message .. "üìä Contador: " .. (counterSuccess and "‚úÖ OK" or "‚ùå ERRO") .. "\n"
    message = message .. "üóÑÔ∏è DataStore User IDs: " .. (userIdStoreSuccess and "‚úÖ OK" or "‚ùå ERRO") .. "\n"
    message = message .. "üî¢ Pr√≥ximo ID: " .. (details.currentCounter + 1) .. "\n"
    message = message .. "üè• Status Geral: " .. (isHealthy and "‚úÖ SAUD√ÅVEL" or "‚ùå PROBLEMAS DETECTADOS")
    
    return {
        success = isHealthy,
        message = message,
        details = details
    }
end

--- Busca o Roblox ID que possui um User ID espec√≠fico
function UserIdModule.findRobloxIdByUserId(targetUserId: number): number?
    local success, robloxId = pcall(function()
        local pages = userIdDataStore:ListKeysAsync()
        repeat
            local keys = pages:GetCurrentPage()
            for _, keyInfo in pairs(keys) do
                local existingUserId = userIdDataStore:GetAsync(keyInfo.KeyName)
                if existingUserId == targetUserId then
                    return tonumber(keyInfo.KeyName)
                end
            end
            if not pages.IsFinished then
                pages:AdvanceToNextPageAsync()
            end
        until pages.IsFinished
        return nil
    end)
    
    return success and robloxId or nil
end

--- Verifica se um User ID j√° est√° em uso
function UserIdModule.isUserIdInUse(userId: number): boolean
    if usedIdsCache[userId] then
        return true
    end
    
    return UserIdModule.findRobloxIdByUserId(userId) ~= nil
end

--- Obt√©m o nome do jogador que possui um User ID espec√≠fico
function UserIdModule.getPlayerNameByUserId(userId: number): string?
    local robloxId = UserIdModule.findRobloxIdByUserId(userId)
    if not robloxId then
        return nil
    end
    
    -- Verificar se est√° online
    local Players = game:GetService("Players")
    local onlinePlayer = Players:GetPlayerByUserId(robloxId)
    if onlinePlayer then
        return onlinePlayer.Name
    end
    
    -- Buscar nome offline
    return UserIdModule.getUsername(robloxId)
end

--- Atualiza o leaderboard de um jogador online
function UserIdModule.updatePlayerLeaderboard(robloxUserId: number, newUserId: number)
    local Players = game:GetService("Players")
    local player = Players:GetPlayerByUserId(robloxUserId)
    if not player then return end
    
    local leaderstats = player:FindFirstChild("leaderstats")
    if not leaderstats then return end
    
    local userIdValue = leaderstats:FindFirstChild("ID")
    if userIdValue and userIdValue:IsA("IntValue") then
        userIdValue.Value = newUserId
    end
end

--- Altera o User ID de um jogador espec√≠fico
function UserIdModule.changeUserId(robloxUserId: number, newUserId: number): boolean
    -- Valida√ß√µes
    if not robloxUserId or robloxUserId <= 0 then
        warn("‚ùå Roblox User ID inv√°lido:", robloxUserId)
        return false
    end
    
    if not newUserId or newUserId <= 0 then
        warn("‚ùå Novo User ID inv√°lido:", newUserId)
        return false
    end
    
    -- Verificar se o novo ID j√° est√° em uso por outro jogador
    if UserIdModule.isUserIdInUse(newUserId) then
        local currentUserId = UserIdModule.getUserIdByRobloxId(robloxUserId)
        if currentUserId ~= newUserId then
            local conflictingPlayerName = UserIdModule.getPlayerNameByUserId(newUserId)
            local errorMessage = "‚ùå User ID " .. newUserId .. " j√° est√° em uso"
            if conflictingPlayerName then
                errorMessage = errorMessage .. " por " .. conflictingPlayerName
            end
            warn(errorMessage)
            return false
        end
    end
    
    -- Salvar altera√ß√£o no DataStore
    local success = pcall(function()
        userIdDataStore:SetAsync(tostring(robloxUserId), newUserId)
    end)
    
    if not success then
        warn("‚ùå Erro ao salvar User ID no DataStore")
        return false
    end
    
    -- Atualizar caches
    local oldUserId = UserIdModule.getUserIdByRobloxId(robloxUserId)
    if oldUserId then
        usedIdsCache[oldUserId] = nil
    end
    usedIdsCache[newUserId] = true
    
    -- Atualizar leaderboard se jogador estiver online
    UserIdModule.updatePlayerLeaderboard(robloxUserId, newUserId)
    
    print("‚úÖ User ID alterado:", robloxUserId, "->", newUserId)
    return true
end



return UserIdModule