local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")

-- Importar m√≥dulos necess√°rios
local ChatMessage = require(game.ServerScriptService.Server.framework.modules["chat-message"])
local CodeRewards = require(game.ServerScriptService.Server.framework.modules["code-rewards"])
local redeemableCodes = require(ReplicatedStorage.Shared["redeemable-codes"])
local STORAGE_DEFINITIONS = require(ReplicatedStorage.Shared.storage)

-- Configurar DataStore para c√≥digos resgatados
local redeemedCodesDataStore = DataStoreService:GetDataStore(STORAGE_DEFINITIONS.redeemedCodes)

-- Criar o RemoteEvent para c√≥digos se n√£o existir
local codeRedeemEvent = ReplicatedStorage:FindFirstChild("CodeRedeemEvent")
if not codeRedeemEvent then
    codeRedeemEvent = Instance.new("RemoteEvent")
    codeRedeemEvent.Name = "CodeRedeemEvent"
    codeRedeemEvent.Parent = ReplicatedStorage
end

-- Cache tempor√°rio para melhor performance (ser√° sincronizado com DataStore)
local playerCodesCache = {}

-- Fun√ß√£o para carregar c√≥digos resgatados de um jogador do DataStore
local function loadPlayerRedeemedCodes(userId: number): {[string]: boolean}
    local success, data = pcall(function()
        return redeemedCodesDataStore:GetAsync(tostring(userId))
    end)
    
    if success and data and type(data) == "table" then
        return data
    end
    
    return {} -- Retorna tabela vazia se n√£o h√° dados ou erro
end

-- Fun√ß√£o para salvar c√≥digos resgatados de um jogador no DataStore
local function savePlayerRedeemedCodes(userId: number, codes: {[string]: boolean})
    local success = pcall(function()
        redeemedCodesDataStore:SetAsync(tostring(userId), codes)
    end)
    
    if not success then
        warn("Erro ao salvar c√≥digos resgatados para o jogador ID:", userId)
    end
    
    return success
end

-- Fun√ß√£o para verificar se um jogador j√° resgatou um c√≥digo
local function hasPlayerRedeemedCode(userId: number, code: string): boolean
    -- Verificar primeiro no cache
    if playerCodesCache[userId] then
        return playerCodesCache[userId][code] == true
    end
    
    -- Se n√£o est√° no cache, carregar do DataStore
    local redeemedCodes = loadPlayerRedeemedCodes(userId)
    playerCodesCache[userId] = redeemedCodes
    
    return redeemedCodes[code] == true
end

-- Fun√ß√£o para marcar um c√≥digo como resgatado
local function markCodeAsRedeemed(userId: number, code: string): boolean
    -- Atualizar cache
    if not playerCodesCache[userId] then
        playerCodesCache[userId] = loadPlayerRedeemedCodes(userId)
    end
    
    playerCodesCache[userId][code] = true
    
    -- Salvar no DataStore
    return savePlayerRedeemedCodes(userId, playerCodesCache[userId])
end

-- Fun√ß√£o para processar resgate de c√≥digo
local function processCodeRedeem(player: Player?, code: string)
    -- Valida√ß√µes b√°sicas
    if not player or not code or type(code) ~= "string" then
        if player then
            ChatMessage.sendError(player, "Erro interno: dados inv√°lidos")
            codeRedeemEvent:FireClient(player, false, "Erro interno: dados inv√°lidos", code or "")
        end
        return
    end
    
    -- Limpar espa√ßos em branco
    code = string.gsub(code, "^%s*(.-)%s*$", "%1")
    
    -- Verificar se o c√≥digo existe
    if not redeemableCodes[code] then
        ChatMessage.sendError(player, "C√≥digo inv√°lido ou n√£o encontrado!")
        codeRedeemEvent:FireClient(player, false, "C√≥digo inv√°lido ou n√£o encontrado!", code)
        return
    end
    
    -- Verificar se o jogador j√° usou este c√≥digo
    if hasPlayerRedeemedCode(player.UserId, code) then
        ChatMessage.sendWarning(player, "Voc√™ j√° resgatou o c√≥digo: " .. code)
        codeRedeemEvent:FireClient(player, false, "Voc√™ j√° resgatou o c√≥digo: " .. code, code)
        print("üîÑ Debug: Jogador " .. player.Name .. " tentou resgatar c√≥digo j√° usado: " .. code)
        return
    end
    
    -- Marcar c√≥digo como usado pelo jogador no DataStore
    local saveSuccess = markCodeAsRedeemed(player.UserId, code)
    if not saveSuccess then
        ChatMessage.sendError(player, "Erro ao salvar progresso. Tente novamente.")
        codeRedeemEvent:FireClient(player, false, "Erro ao salvar progresso. Tente novamente.", code)
        return
    end
    
    -- Processar recompensa do c√≥digo
    local rewardSuccess = CodeRewards.giveReward(player, code)
    
    if not rewardSuccess then
        ChatMessage.sendError(player, "Erro ao processar recompensa do c√≥digo!")
        codeRedeemEvent:FireClient(player, false, "Erro ao processar recompensa do c√≥digo!", code)
        return
    end
    
    -- Enviar confirma√ß√£o de sucesso para o cliente
    local rewardInfo = CodeRewards.getRewardInfo(code)
    local successMessage = rewardInfo and rewardInfo.message or "C√≥digo resgatado com sucesso!"
    codeRedeemEvent:FireClient(player, true, successMessage, code)
    
    -- Log do resgate
    print("‚úÖ Jogador " .. player.Name .. " (ID: " .. player.UserId .. ") resgatou o c√≥digo: " .. code)
end

-- Conectar evento de resgate
codeRedeemEvent.OnServerEvent:Connect(processCodeRedeem)

-- Pr√©-carregar c√≥digos resgatados quando jogador entrar (melhor performance)
Players.PlayerAdded:Connect(function(player)
    -- Carregar dados em background para cache
    task.spawn(function()
        playerCodesCache[player.UserId] = loadPlayerRedeemedCodes(player.UserId)
        print("C√≥digos resgatados carregados para:", player.Name)
    end)
end)

-- Limpar cache quando jogador sair (DataStore persiste automaticamente)
Players.PlayerRemoving:Connect(function(player)
    if playerCodesCache[player.UserId] then
        playerCodesCache[player.UserId] = nil
    end
end)

print("Sistema de resgate de c√≥digos inicializado com DataStore persistente!") 